""" Builds path planning package.
"""

load("@optimus_pip_deps//:requirements.bzl", "requirement")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("//repositories:cc_defs.bzl", "COPTS")
load("//third_party/pytest:defs.bzl", "py_pytest_test")

py_library(
    name = "primitive_generator",
    srcs = [
        "geometry.py",
        "primitive_generator.py",
    ],
    visibility = ["//visibility:public"],
    deps = [
        requirement("casadi"),
        requirement("numpy"),
    ],
)

py_binary(
    name = "primitive_exporter",
    srcs = ["primitive_exporter.py"],
    visibility = ["//visibility:public"],
    deps = [
        ":primitive_generator",
        requirement("numpy"),
    ],
)

cc_library(
    name = "path_planning",
    srcs = [
        "action_set_2d.cc",
        "astar_se2_planner.cc",
        "grid_2d_planner.cc",
        "grid_utils.cc",
        "planner_algorithm.cc",
        "se2_environment.cc",
    ],
    hdrs = [
        "action_set_2d.h",
        "astar_grid_2d_planner.h",
        "astar_planner.h",
        "astar_se2_planner.h",
        "common_utils.h",
        "dstar_lite_grid_2d_planner.h",
        "dstar_lite_planner.h",
        "grid_2d_environment.h",
        "grid_2d_planner.h",
        "grid_utils.h",
        "planner_algorithm.h",
        "priority_queue_utils.h",
        "se2_environment.h",
    ],
    copts = COPTS,
    visibility = ["//visibility:public"],
    deps = [
        "//optimus:common",
        "@boost//:assert",
        "@boost//:concept",
        "@boost//:concept_check",
        "@boost//:heap",
        "@boost//:preprocessor",
        "@boost//:static_assert",
        "@boost//:type_traits",
        "@eigen",
    ],
)

cc_test(
    name = "tests",
    srcs = [
        "action_set_2d_tests.cc",
        "astar_planner_tests.cc",
        "common_utils_tests.cc",
        "dstar_lite_planner_tests.cc",
        "grid_2d_environment_tests.cc",
        "planner_algorithm_tests.cc",
        "planner_environment_mocks.h",
        "se2_environment_tests.cc",
    ],
    copts = COPTS,
    deps = [
        ":path_planning",
        "@com_google_googletest//:gtest_main",
    ],
)

py_pytest_test(
    name = "primitive_generator_tests",
    srcs = [
        "primitive_generator_tests.py",
    ],
    deps = [
        "//optimus/path_planning:primitive_generator",
    ],
)

py_binary(
    name = "generate_benchmark_data",
    srcs = ["generate_benchmark_data.py"],
    deps = [
        requirement("pillow"),
    ],
)

genrule(
    name = "benchmark_data",
    srcs = ["@test_data_csail//file"],
    outs = ["scsail.png"],
    cmd = " ".join([
        "$(location :generate_benchmark_data)",
        "--output_dir=`dirname $@`",
    ]),
    tools = [":generate_benchmark_data"],
)

cc_binary(
    name = "benchmark_planners",
    srcs = [
        "benchmark_planners.cc",
    ],
    copts = COPTS,
    data = [":benchmark_data"],
    deps = [
        ":path_planning",
        "@com_github_google_benchmark//:benchmark",
        "@stb//:stb_image",
    ],
)
